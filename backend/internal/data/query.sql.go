// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package data

import (
	"context"
)

const selectAProduct = `-- name: SelectAProduct :one
SELECT id, user_id, name, image, brand, category, description, rating, num_reviews, price, count_in_stock, created_at, updated_at FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) SelectAProduct(ctx context.Context, id int64) (Product, error) {
	row := q.queryRow(ctx, q.selectAProductStmt, selectAProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Image,
		&i.Brand,
		&i.Category,
		&i.Description,
		&i.Rating,
		&i.NumReviews,
		&i.Price,
		&i.CountInStock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectProducts = `-- name: SelectProducts :many
SELECT id, user_id, name, image, brand, category, description, rating, num_reviews, price, count_in_stock, created_at, updated_at FROM products
ORDER BY id
`

func (q *Queries) SelectProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.query(ctx, q.selectProductsStmt, selectProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Image,
			&i.Brand,
			&i.Category,
			&i.Description,
			&i.Rating,
			&i.NumReviews,
			&i.Price,
			&i.CountInStock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
